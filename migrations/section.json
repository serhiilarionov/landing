{
  "section": "header",
  "language": "en",
  "position": 1,
  "template": "<header id='header' class='header'> <div class='container'> <h1 class='logo pull-left'> <a class='scrollto' href='#promo'> <span class='logo-title'>EJS</span> </a> </h1><!--//logo--> <div class='language'>Language:<select id='language'><option id='english' value='en'>English</option><option id='russian' value='ru'>Русский</option></select></div> <nav id='main-nav' class='main-nav navbar-right' role='navigation'> <div class='navbar-header'> <button class='navbar-toggle' type='button' data-toggle='collapse' data-target='#navbar-collapse'> <span class='sr-only'>Toggle navigation</span> <span class='icon-bar'></span> <span class='icon-bar'></span> <span class='icon-bar'></span> </button><!--//nav-toggle--> </div><!--//navbar-header--> <div class='navbar-collapse collapse' id='navbar-collapse'> <ul class='nav navbar-nav'> <li class='active nav-item sr-only'><a class='scrollto' href='#promo'>Home</a></li> <li class='nav-item'><a class='scrollto' href='#about'>About</a></li> <li class='nav-item'><a class='scrollto' href='#features'>Features</a></li> <li class='nav-item'><a class='scrollto' href='#install'>Get Started</a></li> <li class='nav-item'><a class='scrollto' href='#docs'>Docs</a></li> <li class='nav-item'><a class='scrollto' href='#support'>Support</a></li> <li class='nav-item'><a class='scrollto' href='#license'>License</a></li> </ul><!--//navbar-nav--> </div><!--//navabr-collapse--> </nav><!--//main-nav--> </div><!--//container--> </header><!--//header-->"
}
{
  "section": "promo",
  "language": "en",
  "position": 2,
  "template": "<section id='promo' class='promo section offset-header'> <div class='container text-center'> <h2 class='title'> <span class='highlight'> <span style='font-size: 60%;'>&lt;%=</span> EJS <span style='font-size: 60%;'>%&gt;</span> </span> </h2> <p class='intro'>Effective JavaScript templating.</p> <div class='btns'> <a class='btn btn-cta-secondary scrollto' href='#install'>Get Started</a> </div> <ul class='meta list-inline'> <li>&nbsp;</li> </ul><!--//meta--> </div><!--//container--> <div class='social-media'> <div class='social-media-inner container text-center'> <ul class='list-inline'></ul> </div> </div> </section><!--//promo-->"
}
{
  "section": "about",
  "language": "en",
  "position": 3,
  "template": "<section id='about' class='about section'> <div class='container'> <h2 class='title text-center'>What is EJS?</h2> <p class='intro text-center'>'E' is for 'effective.' EJS is a simple templating language that lets you generate HTML markup with plain JavaScript. No religiousness about how to organize things. No reinvention of iteration and control-flow. It's just plain JavaScript.</p> <div class='row'> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-heart'></i> </div> <div class='content'> <h3 class='sub-title'>Use plain JavaScript</h3> <p>We love JavaScript. It's a totally friendly language. All templating languages grow to be Turing-complete. Just cut out the middle-man, and use JS!</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-clock-o'></i> </div> <div class='content'> <h3 class='sub-title'>Fast development time</h3> <p>Don't waste time and attention figuring out arcane new syntax because 'elegance' &mdash; or how to preprocess your data so it will actually render right.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-code'></i> </div> <div class='content'> <h3 class='sub-title'>Simple syntax</h3> <p>JavaScript code in simple, straightforward scriptlet tags. Just write JavaScript that emits the HTML you want, and get the job done!</p> </div><!--//content--> </div><!--//item--> <div class='clearfix visible-md'></div> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-fighter-jet'></i> </div> <div class='content'> <h3 class='sub-title'>Speedy execution</h3> <p>We all know how fast V8 and the other JavaScript runtimes have gotten. EJS caches the intermediate JS functions for fast execution.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-thumbs-up'></i> </div> <div class='content'> <h3 class='sub-title'>Easy debugging</h3> <p>It's easy to debug EJS errors: your errors are plain JavaScript exceptions, with template line-numbers included.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-flask'></i> </div> <div class='content'> <h3 class='sub-title'>Active development</h3> <p>EJS has a large community of active users, and the library is under active development. We're happy to answer your questions or give you help.</p> </div><!--//content--> </div><!--//item--> </div><!--//row--> </div><!--//container--> </section>"
}
{
  "section": "features",
  "language": "en",
  "position": 4,
  "template": "<section id='features' class='features section'> <div class='container text-center'> <h2 class='title'>Features</h2> <ul class='feature-list list-unstyled'> <li><i class='fa fa-check'></i>Fast compilation and rendering</li> <li><i class='fa fa-check'></i>Simple template tags: &lt;% %&gt;</li> <li><i class='fa fa-check'></i>Custom delimiters (e.g., use &lt;? ?&gt; instead of &lt;% %&gt;)</li> <li><i class='fa fa-check'></i>Includes</li> <li><i class='fa fa-check'></i>Both server JS and browser support</li> <li><i class='fa fa-check'></i>Static caching of intermediate JavaScript</li> <li><i class='fa fa-check'></i>Static caching of templates</li> <li><i class='fa fa-check'></i>Complies with the <a href='http://expressjs.com'>Express</a> view system</li> </ul> </div><!--//container--> </section><!--//features-->"
}
{
  "section": "install",
  "language": "en",
  "position": 5,
  "template": "<section id='install' class='install section'> <div class='container'> <div class='install-inner'> <h2 class='title text-center'>Get Started</h2> <div class='block'> <h3 class='sub-title text-center'>Install</h3> <p>It's easy to install EJS with NPM.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-bash'>$ npm install ejs</code></pre> </div> <!--//code-block--> <h3 class='sub-title text-center'>Use</h3> <p>Pass EJS a template string and some data. BOOM, you've got some HTML.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var ejs = require('ejs'), people = ['geddy', 'neil', 'alex'], html = ejs.render('&lt;%= people.join(', '); %&gt;', {people: people});</code></pre> </div> <!--//code-block--> <h3 class='sub-title text-center'>Browser support</h3> <p>Download a browser build from <a href='https://github.com/mde/ejs/releases/latest'>the latest release</a>, and use it in a script tag.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;script src='ejs.js'&gt;&lt;/script&gt; &lt;script&gt; var people = ['geddy', 'neil', 'alex'], html = ejs.render('&lt;%= people.join(', '); %&gt;', {people: people}); &lt;/script&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> </div><!--//install-inner--> </div><!--//container--> </section><!--//install-->"
}
{
  "section": "docs",
  "language": "en",
  "position": 6,
  "template": "<section id='docs' class='docs section'> <div class='container'> <div class='docs-inner'> <h2 class='title text-center'>Docs</h2> <div class='block'> <h3 class='sub-title text-center'>Example</h3> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;% if (user) { %&gt; &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt; &lt;% } %&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Usage</h3> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var template = ejs.compile(str, options); template(data); // => Rendered HTML string ejs.render(str, data, options); // => Rendered HTML string ejs.renderFile(filename, data, options, function(err, str){ // str => Rendered HTML string });</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Options</h3> <ul> <li><code>cache</code> Compiled functions are cached, requires <code>filename</code></li> <li><code>filename</code> Used by <code>cache</code> to key caches, and for includes</li> <li><code>context</code> Function execution context</li> <li><code>compileDebug</code> When <code>false</code> no debug instrumentation is compiled</li> <li><code>client</code> Returns standalone compiled function</li> <li><code>delimiter</code> Character to use with angle brackets for open/close</li> <li><code>debug</code> Output generated function body</li> <li><code>_with</code> Whether or not to use <code>with() {}</code> constructs. If <code>false</code> then the locals will be stored in the <code>locals</code> object.</li> <li><code>localsName</code> Name to use for the object storing local variables when not using <code>with</code> Defaults to <code>locals</code></li> <li><code>rmWhitespace</code> Remove all safe-to-remove whitespace, including leading and trailing whitespace. It also enables a safer version of <code>-%&gt;</code> line slurping for all scriptlet tags (it does not strip new lines of tags in the middle of a line).</li> <li><code>escape</code> The escaping function used with <code>&lt;%=</code> construct. It is used in rendering and is <code>.toString()</code>ed in the generation of client functions. (By default escapes XML).</li> </ul> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Tags</h3> <ul> <li><code>&lt;%</code> 'Scriptlet' tag, for control-flow, no output</li> <li><code>&lt;%_</code> вЂWhitespace SlurpingвЂ™ Scriptlet tag, strips all whitespace before it</li> <li><code>&lt;%=</code> Outputs the value into the template (HTML escaped)</li> <li><code>&lt;%-</code> Outputs the unescaped value into the template</li> <li><code>&lt;%#</code> Comment tag, no execution, no output</li> <li><code>&lt;%%</code> Outputs a literal '&lt;%'</li> <li><code>%&gt;</code> Plain ending tag</li> <li><code>-%&gt;</code> Trim-mode ('newline slurp') tag, trims following newline</li> <li><code>_%&gt;</code> вЂWhitespace SlurpingвЂ™ ending tag, removes all whitespace after it</li> </ul> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Includes</h3> <p>Includes are relative to the template with the <code>include</code> call. (This requires the 'filename' option.) For example if you have './views/users.ejs' and './views/user/show.ejs' you would use <code>&lt;%- include('user/show'); %&gt;</code>.</p> <p>You'll likely want to use the raw output tag (<code>&lt;%-</code>) with your include to avoid double-escaping the HTML output.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;ul&gt; &lt;% users.forEach(function(user){ %&gt; &lt;%- include('user/show', {user: user}); %&gt; &lt;% }); %&gt; &lt;/ul&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Custom delimiters</h3> <p>Custom delimiters can be applied on a per-template basis, or globally:</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var ejs = require('ejs'), users = ['geddy', 'neil', 'alex']; // Just one template ejs.render('&lt;?= users.join(' | '); ?&gt;', {users: users}, {delimiter: '?'}); // => 'geddy | neil | alex' // Or globally ejs.delimiter = '$'; ejs.render('&lt;$= users.join(' | '); $&gt;', {users: users}); // => 'geddy | neil | alex'</code></pre> </div> <!--//code-block--> </div><!--//block--> </div><!--//docs-inner--> </div><!--//container--> </section><!--//features-->"
}
{
  "section": "support",
  "language": "en",
  "position": 7,
  "template": "<section id='support' class='support section'> <div class='container'> <div class='support-inner'> <h2 class='title text-center'>Support</h2> <div class='block'> <h3 class='sub-title text-center'><a href='http://start.thinkful.com/node/?utm_source=github&utm_medium=badge&utm_campaign=ejs'>Live help sessions on Thinkful</a></h3> <p>Bring your questions and pair with other ejs users in a <a href='http://start.thinkful.com/node/?utm_source=github&utm_medium=badge&utm_campaign=ejs'>live Thinkful hangout</a>. Hear about the challenges other developers are running into, or screenshare your own code with the group for feedback.</p> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'><a href='http://stackoverflow.com/questions/tagged/ejs'>Stack Overflow</a></h3> <p><a href='http://stackoverflow.com/questions/ask'>Ask questions</a> about specific problems you have faced, including details about what exactly you are trying to do. Make sure you tag your question with <code>ejs</code>. You can also read through <a href='http://stackoverflow.com/questions/tagged/ejs'>existing ejs questions</a>.</p> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'><a href='https://github.com/mde/ejs/issues'>GitHub issues</a></h3> <p>The <a href='https://github.com/mde/ejs/issues'>issue tracker</a> is the preferred channel for bug reports, features requests and submitting pull requests.</p> </div><!--//block--> </div><!--//support-inner--> </div><!--//container--> </section><!--//support-->"
}
{
  "section": "license",
  "language": "en",
  "position": 8,
  "template": "<section id='license' class='license section'> <div class='container'> <div class='license-inner'> <h2 class='title text-center'>License</h2> <p>EJS is licensed under the Apache License, version 2.0. Information can found here: <a href='http://www.apache.org/licenses/'>http://www.apache.org/licenses/</a>.</p> </div><!--//license-inner--> </div><!--//container--> </section><!--//license-->"
}
{
  "section": "header",
  "language": "ru",
  "position": 1,
  "template": "<header id='header' class='header'> <div class='container'> <h1 class='logo pull-left'> <a class='scrollto' href='#promo'> <span class='logo-title'>EJS</span> </a> </h1><!--//logo--> <div class='language'>Язык:<select id='language'><option id='english' value='en'>English</option><option id='russian' value='ru'>Русский</option></select></div> <nav id='main-nav' class='main-nav navbar-right' role='navigation'> <div class='navbar-header'> <button class='navbar-toggle' type='button' data-toggle='collapse' data-target='#navbar-collapse'> <span class='sr-only'>Навигация</span> <span class='icon-bar'></span> <span class='icon-bar'></span> <span class='icon-bar'></span> </button><!--//nav-toggle--> </div><!--//navbar-header--> <div class='navbar-collapse collapse' id='navbar-collapse'> <ul class='nav navbar-nav'> <li class='active nav-item sr-only'><a class='scrollto' href='#promo'>Главная</a></li> <li class='nav-item'><a class='scrollto' href='#about'>Про EJS</a></li> <li class='nav-item'><a class='scrollto' href='#features'>Возможности</a></li> <li class='nav-item'><a class='scrollto' href='#install'>Начнем</a></li> <li class='nav-item'><a class='scrollto' href='#docs'>Документация</a></li> <li class='nav-item'><a class='scrollto' href='#support'>Поддержка</a></li> <li class='nav-item'><a class='scrollto' href='#license'>Лицензия</a></li> </ul><!--//navbar-nav--> </div><!--//navabr-collapse--> </nav><!--//main-nav--></div><!--//container--> </header><!--//header-->"
}
{
  "section": "promo",
  "language": "ru",
  "position": 2,
  "template": "<section id='promo' class='promo section offset-header'> <div class='container text-center'> <h2 class='title'> <span class='highlight'> <span style='font-size: 60%;'>&lt;%=</span> EJS <span style='font-size: 60%;'>%&gt;</span> </span> </h2> <p class='intro'>Эффективный шаблон для JavaScript.</p> <div class='btns'> <a class='btn btn-cta-secondary scrollto' href='#install'>Начнем</a> </div> <ul class='meta list-inline'> <li>&nbsp;</li> </ul><!--//meta--> </div><!--//container--> <div class='social-media'> <div class='social-media-inner container text-center'> <ul class='list-inline'></ul> </div> </div> </section><!--//promo-->"
}
{
  "section": "about",
  "language": "ru",
  "position": 3,
  "template": "<section id='about' class='about section'> <div class='container'> <h2 class='title text-center'>Что такое EJS?</h2> <p class='intro text-center'> «E» для «эффективного». EJS - это простой язык шаблонов, который позволяет генерировать HTML-разметку с помощью простого JavaScript. Нет религиозности о том, как организовать вещи. Не переосмысливать итерацию и поток управления. Это просто JavaScript.</p> <div class='row'> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-heart'></i> </div> <div class='content'> <h3 class='sub-title'>Использ. простой JavaScript</h3> <p> Мы любим JavaScript. Это абсолютно дружественный язык. Все языки шаблонов растут, чтобы быть тью́ринг-по́лными.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-clock-o'></i> </div> <div class='content'> <h3 class='sub-title'>Быстрое время разработки</h3> <p>Не тратьте время и внимание на разработку тайного нового синтаксиса, поскольку «элегантность» или предикация ваших данных.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-code'></i> </div> <div class='content'> <h3 class='sub-title'>Простой синтаксис</h3> <p>JavaScript-код в простых, простых тегах сценария. Просто напишите JavaScript, который испускает HTML-код, который вы хотите, и выполните задание!</p> </div><!--//content--> </div><!--//item--> <div class='clearfix visible-md'></div> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-fighter-jet'></i> </div> <div class='content'> <h3 class='sub-title'>Быстрое выполнение</h3> <p>Мы все знаем, как быстро V8 И другие среды выполнения JavaScript получили. EJS кэширует промежуточные функции JS для быстрого выполнения.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-thumbs-up'></i> </div> <div class='content'> <h3 class='sub-title'>Легкая отладка</h3> <p>Легко отлаживать ошибки EJS: ваши ошибки - это простые исключения JavaScript, с включенными номерами шаблонов.</p> </div><!--//content--> </div><!--//item--> <div class='item col-md-4 col-sm-6 col-xs-12'> <div class='icon-holder'> <i class='fa fa-flask'></i> </div> <div class='content'> <h3 class='sub-title'>Активная разработка</h3> <p> EJS имеет большое сообщество активных пользователей, и библиотека находится в активной разработке. Мы будем рады ответить на ваши вопросы или помочь вам.</p> </div><!--//content--> </div><!--//item--> </div><!--//row--> </div><!--//container--> </section>"
}
{
  "section": "features",
  "language": "ru",
  "position": 4,
  "template": "<section id='features' class='features section'> <div class='container text-center'> <h2 class='title'>Возможности</h2> <ul class='feature-list list-unstyled'> <li><i class='fa fa-check'></i>Быстрая компиляция и рендеринг</li> <li><i class='fa fa-check'></i>Простые теги шаблона: &lt;%%&gt;</li> <li><i class='fa fa-check'></i>Пользовательские разделители (например, используйте &lt;??&gt; вместо &lt;%%&gt;)</li> <li><i class='fa fa-check'></i>Подключения</li> <li><i class='fa fa-check'></i>Поддержка на сервере и в браузере</li> <li><i class='fa fa-check'></i>Статическое кэширование промежуточного JavaScript</li> <li><i class='fa fa-check'></i>Статическое кэширование шаблонов</li> <li><i class='fa fa-check'></i>Соответствует <a href='http://expressjs.com'>Express</a> отображению</li> </ul> </div><!--//container--> </section><!--//features-->"
}
{
  "section": "install",
  "language": "ru",
  "position": 5,
  "template": "<section id='install' class='install section'> <div class='container'> <div class='install-inner'> <h2 class='title text-center'>Начнем</h2> <div class='block'> <h3 class='sub-title text-center'>Установка</h3> <p>Легко установить EJS с помощью NPM.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-bash'>$ npm install ejs</code></pre> </div> <!--//code-block--> <h3 class='sub-title text-center'>Использовать</h3> <p>Добавить EJS строку шаблона и некоторые данные. BOOM, у вас есть HTML.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var ejs = require('ejs'), people = ['geddy', 'neil', 'alex'], html = ejs.render('&lt;%= people.join(', '); %&gt;', {people: people});</code></pre> </div> <!--//code-block--> <h3 class='sub-title text-center'>Поддержка браузера</h3> <p>Загрузите сборку браузера из <a href='https://github.com/mde/ejs/releases/latest'>последнего релиза</a>, и использовать его в теге скрипта.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;script src='ejs.js'&gt;&lt;/script&gt; &lt;script&gt; var people = ['geddy', 'neil', 'alex'], html = ejs.render('&lt;%= people.join(', '); %&gt;', {people: people}); &lt;/script&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> </div><!--//install-inner--> </div><!--//container--> </section><!--//install-->"
}
{
  "section": "docs",
  "language": "ru",
  "position": 6,
  "template": "<section id='docs' class='docs section'> <div class='container'> <div class='docs-inner'> <h2 class='title text-center'>Документация</h2> <div class='block'> <h3 class='sub-title text-center'>Пример</h3> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;% if (user) { %&gt; &lt;h2&gt;&lt;%= user.name %&gt;&lt;/h2&gt; &lt;% } %&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Использование</h3> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var template = ejs.compile(str, options); template(data); // => Rendered HTML string ejs.render(str, data, options); // => Rendered HTML string ejs.renderFile(filename, data, options, function(err, str){ // str => Rendered HTML string });</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Параметры</h3> <ul> <li><code>cache</code> Скомпилированные функции кэшируются, требуется <code> filename </code></li> <li><code>filename</code> Используется <cache> cache </code> для кэширования ключей и включает</li> <li><code>context</code> Контекст выполнения функции</li> <li><code>compileDebug</code> Когда <code> false </code> не скомпилирована аппаратура отладки</li> <li><code>client</code> Возвращает автономную скомпилированную функцию</li> <li><code>delimiter</code> Символ для использования с угловыми скобками для открытия/закрытия</li> <li><code>debug</code> Вывод сгенерированного тела функций</li> <li><code>_with</code> Использовать или не использовать <code> with() {}</code> конструкциями. Если <code> false </code>, то местные жители будут сохранены в объекте <code> locals </code>.</li> <li><code>localsName</code> Имя, которое будет использоваться для хранения переменных, когда не используется <code> with </code> По умолчанию <code> locals </code> </li> <li><code>rmWhitespace</code> Удалить все пробелы, включая ведущие и завершающие пробельные. Это также обеспечивает более безопасную версию строки <code> -%&gt; </code> для всех тэгов сценариев (она не разбивает новые строки тегов в середине строки).</li> <li><code>escape</code> Функция escaping, используемая с конструкцией <code> &lt;%= </code>. Он используется в рендеринге и является <code> .toString() </code> для генерации клиентских функций. (По умолчанию выбрасывается XML).</li> </ul> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Теги</h3> <ul> <li><code>&lt;%</code> Тег Scriptlet, для потока управления, без вывода</li> <li><code>&lt;%_</code> вЂWhitespace SlurpingвЂ™ тег Scriptlet, удаляет все пробелы перед ним.</li> <li><code>&lt;%=</code> Выводит значение в шаблон (с экранированным HTML) </li> <li><code>&lt;%-</code> Выводит неэкранированное значение в шаблон</li> <li><code>&lt;%#</code> Тег комментария, без выполнения, без вывода</li> <li><code>&lt;%%</code> Выводит литерал '& lt;%'</li> <li><code>%&gt;</code> Обычный редактируемый тег</li> <li><code>-%&gt;</code> Тег Trim-mode ('newline slurp'), обрезает следующий символ новой строки</li> <li><code>_%&gt;</code> вЂWhitespace SlurpingвЂ™ заканчивая тегом, удаляет Все пробелы после него</li> </ul> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Подключение</h3> <p>Подключаеться относительно шаблона с вызовом <code> include </code>. (Для этого требуется опция «filename».) Например, если у вас есть «./views/users.ejs» и «./views/user/show.ejs», вы должны использовать <code> &lt;%- include ('user/show'); %&gt; </code>. </p> <p>Вероятно, вы захотите использовать исходный тег вывода (<code>&lt;%-</code>) с помощью include, чтобы избежать двойного экранирования вывода HTML.</p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-markup'>&lt;ul&gt;&lt;% users.forEach(function(user){ %&gt;&lt;%- include('user/show', {user: user}); %&gt; &lt;% }); %&gt;&lt;/ul&gt;</code></pre> </div> <!--//code-block--> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'>Пользовательские разделители</h3> <p>Пользовательские разделители могут применяться для каждого шаблона или глобально: </p> <div class='code-block'> <!--//Use Prismjs - http://prismjs.com/index.html#basic-usage --> <pre><code class='language-javascript'>var ejs = require('ejs'), users = ['geddy', 'neil', 'alex']; // Для шаблона ejs.render('&lt;?= users.join(' | '); ?&gt;', {users: users}, {delimiter: '?'}); // => 'geddy | neil | alex' // или глобально ejs.delimiter = '$'; ejs.render('&lt;$= users.join(' | '); $&gt;', {users: users}); // => 'geddy | neil | alex'</code></pre> </div> <!--//code-block--> </div><!--//block--> </div><!--//docs-inner--> </div><!--//container--> </section><!--//features-->"
}
{
  "section": "support",
  "language": "ru",
  "position": 7,
  "template": "<section id='support' class='support section'> <div class='container'> <div class='support-inner'> <h2 class='title text-center'>Поддержка</h2> <div class='block'> <h3 class='sub-title text-center'><a href='http://start.thinkful.com/node/?utm_source=github&utm_medium=badge&utm_campaign=ejs'>Живые сеансы справки о Thinkful</a></h3> <p>Задайте свои вопросы и общайтесь с другими пользователями ejs <a href='http://start.thinkful.com/node/?utm_source=github&utm_medium=badge&utm_campaign=ejs'>вживвую в Thinkful</a>. Услышьте о проблемах, с которыми сталкиваются другие разработчики, или экраны вашего собственного кода с группой для обратной связи.</p> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'><a href='http://stackoverflow.com/questions/tagged/ejs'>Stack Overflow</a></h3> <p><a href='http://stackoverflow.com/questions/ask'>Задавайте вопросы</a> о конкретных проблемах, с которыми вы столкнулись, в том числе о том, что именно вы пытаетесь сделать. Вы отмечаете свой квест N с помощью <code>ejs</code>. Вы также можете прочитать <a href='http://stackoverflow.com/questions/tagged/ejs'>существующие вопросы ejs</a>.</p> </div><!--//block--> <div class='block'> <h3 class='sub-title text-center'><a href='https://github.com/mde/ejs/issues'>GitHub issues</a></h3> <p><a href='https://github.com/mde/ejs/issues'>Трекер ошибок </a> является предпочтительным каналом для отчетов об ошибках, запросами функций и отправкой pull запросов.</p> </div><!--//block--> </div><!--//support-inner--> </div><!--//container--> </section><!--//support-->"
}
{
  "section": "license",
  "language": "ru",
  "position": 8,
  "template": "<section id='license' class='license section'> <div class='container'> <div class='license-inner'> <h2 class='title text-center'>Лицензия</h2> <p>EJS лицензируется по лицензии Apache версии 2.0. Информация может быть найдена здесь: <a href='http://www.apache.org/licenses/'>http://www.apache.org/licenses/</a>.</p> </div><!--//license-inner--> </div><!--//container--> </section><!--//license-->"
}